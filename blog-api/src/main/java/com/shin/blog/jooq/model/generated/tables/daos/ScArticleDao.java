/*
 * This file is generated by jOOQ.
 */
package com.shin.blog.jooq.model.generated.tables.daos;


import com.shin.blog.jooq.learn.extend.ExtendDAOImpl;
import com.shin.blog.jooq.model.entity.ScArticle;
import com.shin.blog.jooq.model.generated.tables.TScArticle;
import com.shin.blog.jooq.model.generated.tables.records.ScArticleRecord;

import java.util.List;

import org.jooq.Configuration;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Repository
public class ScArticleDao extends ExtendDAOImpl<ScArticleRecord, ScArticle, Long> {

    /**
     * Create a new ScArticleDao without any configuration
     */
    public ScArticleDao() {
        super(TScArticle.SC_ARTICLE, ScArticle.class);
    }

    /**
     * Create a new ScArticleDao with an attached configuration
     */
    @Autowired
    public ScArticleDao(Configuration configuration) {
        super(TScArticle.SC_ARTICLE, ScArticle.class, configuration);
    }

    @Override
    public Long getId(ScArticle object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<ScArticle> fetchRangeOfId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(TScArticle.SC_ARTICLE.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<ScArticle> fetchById(Long... values) {
        return fetch(TScArticle.SC_ARTICLE.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public ScArticle fetchOneById(Long value) {
        return fetchOne(TScArticle.SC_ARTICLE.ID, value);
    }

    /**
     * Fetch records that have <code>comment_counts BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<ScArticle> fetchRangeOfCommentCounts(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(TScArticle.SC_ARTICLE.COMMENT_COUNTS, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>comment_counts IN (values)</code>
     */
    public List<ScArticle> fetchByCommentCounts(Integer... values) {
        return fetch(TScArticle.SC_ARTICLE.COMMENT_COUNTS, values);
    }

    /**
     * Fetch records that have <code>create_time BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<ScArticle> fetchRangeOfCreateTime(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(TScArticle.SC_ARTICLE.CREATE_TIME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>create_time IN (values)</code>
     */
    public List<ScArticle> fetchByCreateTime(Long... values) {
        return fetch(TScArticle.SC_ARTICLE.CREATE_TIME, values);
    }

    /**
     * Fetch records that have <code>update_time BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<ScArticle> fetchRangeOfUpdateTime(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(TScArticle.SC_ARTICLE.UPDATE_TIME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>update_time IN (values)</code>
     */
    public List<ScArticle> fetchByUpdateTime(Long... values) {
        return fetch(TScArticle.SC_ARTICLE.UPDATE_TIME, values);
    }

    /**
     * Fetch records that have <code>summary BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<ScArticle> fetchRangeOfSummary(String lowerInclusive, String upperInclusive) {
        return fetchRange(TScArticle.SC_ARTICLE.SUMMARY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>summary IN (values)</code>
     */
    public List<ScArticle> fetchBySummary(String... values) {
        return fetch(TScArticle.SC_ARTICLE.SUMMARY, values);
    }

    /**
     * Fetch records that have <code>title BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<ScArticle> fetchRangeOfTitle(String lowerInclusive, String upperInclusive) {
        return fetchRange(TScArticle.SC_ARTICLE.TITLE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>title IN (values)</code>
     */
    public List<ScArticle> fetchByTitle(String... values) {
        return fetch(TScArticle.SC_ARTICLE.TITLE, values);
    }

    /**
     * Fetch records that have <code>view_counts BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<ScArticle> fetchRangeOfViewCounts(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(TScArticle.SC_ARTICLE.VIEW_COUNTS, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>view_counts IN (values)</code>
     */
    public List<ScArticle> fetchByViewCounts(Integer... values) {
        return fetch(TScArticle.SC_ARTICLE.VIEW_COUNTS, values);
    }

    /**
     * Fetch records that have <code>weight BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<ScArticle> fetchRangeOfWeight(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(TScArticle.SC_ARTICLE.WEIGHT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>weight IN (values)</code>
     */
    public List<ScArticle> fetchByWeight(Integer... values) {
        return fetch(TScArticle.SC_ARTICLE.WEIGHT, values);
    }

    /**
     * Fetch records that have <code>author_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<ScArticle> fetchRangeOfAuthorId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(TScArticle.SC_ARTICLE.AUTHOR_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>author_id IN (values)</code>
     */
    public List<ScArticle> fetchByAuthorId(Long... values) {
        return fetch(TScArticle.SC_ARTICLE.AUTHOR_ID, values);
    }

    /**
     * Fetch records that have <code>body_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<ScArticle> fetchRangeOfBodyId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(TScArticle.SC_ARTICLE.BODY_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>body_id IN (values)</code>
     */
    public List<ScArticle> fetchByBodyId(Long... values) {
        return fetch(TScArticle.SC_ARTICLE.BODY_ID, values);
    }

    /**
     * Fetch records that have <code>category_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<ScArticle> fetchRangeOfCategoryId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(TScArticle.SC_ARTICLE.CATEGORY_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>category_id IN (values)</code>
     */
    public List<ScArticle> fetchByCategoryId(Long... values) {
        return fetch(TScArticle.SC_ARTICLE.CATEGORY_ID, values);
    }
}
