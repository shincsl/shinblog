/*
 * This file is generated by jOOQ.
 */
package com.shin.blog.jooq.model.generated.tables.daos;


import com.shin.blog.jooq.learn.extend.ExtendDAOImpl;
import com.shin.blog.jooq.model.entity.ScPermission;
import com.shin.blog.jooq.model.generated.tables.TScPermission;
import com.shin.blog.jooq.model.generated.tables.records.ScPermissionRecord;

import java.util.List;

import org.jooq.Configuration;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Repository
public class ScPermissionDao extends ExtendDAOImpl<ScPermissionRecord, ScPermission, Long> {

    /**
     * Create a new ScPermissionDao without any configuration
     */
    public ScPermissionDao() {
        super(TScPermission.SC_PERMISSION, ScPermission.class);
    }

    /**
     * Create a new ScPermissionDao with an attached configuration
     */
    @Autowired
    public ScPermissionDao(Configuration configuration) {
        super(TScPermission.SC_PERMISSION, ScPermission.class, configuration);
    }

    @Override
    public Long getId(ScPermission object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<ScPermission> fetchRangeOfId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(TScPermission.SC_PERMISSION.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<ScPermission> fetchById(Long... values) {
        return fetch(TScPermission.SC_PERMISSION.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public ScPermission fetchOneById(Long value) {
        return fetchOne(TScPermission.SC_PERMISSION.ID, value);
    }

    /**
     * Fetch records that have <code>name BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<ScPermission> fetchRangeOfName(String lowerInclusive, String upperInclusive) {
        return fetchRange(TScPermission.SC_PERMISSION.NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>name IN (values)</code>
     */
    public List<ScPermission> fetchByName(String... values) {
        return fetch(TScPermission.SC_PERMISSION.NAME, values);
    }

    /**
     * Fetch records that have <code>path BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<ScPermission> fetchRangeOfPath(String lowerInclusive, String upperInclusive) {
        return fetchRange(TScPermission.SC_PERMISSION.PATH, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>path IN (values)</code>
     */
    public List<ScPermission> fetchByPath(String... values) {
        return fetch(TScPermission.SC_PERMISSION.PATH, values);
    }

    /**
     * Fetch records that have <code>description BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<ScPermission> fetchRangeOfDescription(String lowerInclusive, String upperInclusive) {
        return fetchRange(TScPermission.SC_PERMISSION.DESCRIPTION, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>description IN (values)</code>
     */
    public List<ScPermission> fetchByDescription(String... values) {
        return fetch(TScPermission.SC_PERMISSION.DESCRIPTION, values);
    }
}
