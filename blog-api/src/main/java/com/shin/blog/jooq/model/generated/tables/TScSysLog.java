/*
 * This file is generated by jOOQ.
 */
package com.shin.blog.jooq.model.generated.tables;


import com.shin.blog.jooq.model.generated.Keys;
import com.shin.blog.jooq.model.generated.Shinblog;
import com.shin.blog.jooq.model.generated.tables.records.ScSysLogRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TScSysLog extends TableImpl<ScSysLogRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>shinblog.sc_sys_log</code>
     */
    public static final TScSysLog SC_SYS_LOG = new TScSysLog();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ScSysLogRecord> getRecordType() {
        return ScSysLogRecord.class;
    }

    /**
     * The column <code>shinblog.sc_sys_log.id</code>.
     */
    public final TableField<ScSysLogRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>shinblog.sc_sys_log.create_date</code>.
     */
    public final TableField<ScSysLogRecord, Long> CREATE_DATE = createField(DSL.name("create_date"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>shinblog.sc_sys_log.ip</code>.
     */
    public final TableField<ScSysLogRecord, String> IP = createField(DSL.name("ip"), SQLDataType.VARCHAR(15), this, "");

    /**
     * The column <code>shinblog.sc_sys_log.method</code>.
     */
    public final TableField<ScSysLogRecord, String> METHOD = createField(DSL.name("method"), SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>shinblog.sc_sys_log.module</code>.
     */
    public final TableField<ScSysLogRecord, String> MODULE = createField(DSL.name("module"), SQLDataType.VARCHAR(10), this, "");

    /**
     * The column <code>shinblog.sc_sys_log.nickname</code>.
     */
    public final TableField<ScSysLogRecord, String> NICKNAME = createField(DSL.name("nickname"), SQLDataType.VARCHAR(10), this, "");

    /**
     * The column <code>shinblog.sc_sys_log.operation</code>.
     */
    public final TableField<ScSysLogRecord, String> OPERATION = createField(DSL.name("operation"), SQLDataType.VARCHAR(25), this, "");

    /**
     * The column <code>shinblog.sc_sys_log.params</code>.
     */
    public final TableField<ScSysLogRecord, String> PARAMS = createField(DSL.name("params"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>shinblog.sc_sys_log.time</code>.
     */
    public final TableField<ScSysLogRecord, Long> TIME = createField(DSL.name("time"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>shinblog.sc_sys_log.userid</code>.
     */
    public final TableField<ScSysLogRecord, Long> USERID = createField(DSL.name("userid"), SQLDataType.BIGINT, this, "");

    private TScSysLog(Name alias, Table<ScSysLogRecord> aliased) {
        this(alias, aliased, null);
    }

    private TScSysLog(Name alias, Table<ScSysLogRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>shinblog.sc_sys_log</code> table reference
     */
    public TScSysLog(String alias) {
        this(DSL.name(alias), SC_SYS_LOG);
    }

    /**
     * Create an aliased <code>shinblog.sc_sys_log</code> table reference
     */
    public TScSysLog(Name alias) {
        this(alias, SC_SYS_LOG);
    }

    /**
     * Create a <code>shinblog.sc_sys_log</code> table reference
     */
    public TScSysLog() {
        this(DSL.name("sc_sys_log"), null);
    }

    public <O extends Record> TScSysLog(Table<O> child, ForeignKey<O, ScSysLogRecord> key) {
        super(child, key, SC_SYS_LOG);
    }

    @Override
    public Schema getSchema() {
        return Shinblog.SHINBLOG;
    }

    @Override
    public Identity<ScSysLogRecord, Long> getIdentity() {
        return (Identity<ScSysLogRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<ScSysLogRecord> getPrimaryKey() {
        return Keys.KEY_SC_SYS_LOG_PRIMARY;
    }

    @Override
    public List<UniqueKey<ScSysLogRecord>> getKeys() {
        return Arrays.<UniqueKey<ScSysLogRecord>>asList(Keys.KEY_SC_SYS_LOG_PRIMARY);
    }

    @Override
    public TScSysLog as(String alias) {
        return new TScSysLog(DSL.name(alias), this);
    }

    @Override
    public TScSysLog as(Name alias) {
        return new TScSysLog(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TScSysLog rename(String name) {
        return new TScSysLog(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TScSysLog rename(Name name) {
        return new TScSysLog(name, null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<Long, Long, String, String, String, String, String, String, Long, Long> fieldsRow() {
        return (Row10) super.fieldsRow();
    }
}
