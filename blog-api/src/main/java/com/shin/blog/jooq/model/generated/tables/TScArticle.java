/*
 * This file is generated by jOOQ.
 */
package com.shin.blog.jooq.model.generated.tables;


import com.shin.blog.jooq.model.generated.Keys;
import com.shin.blog.jooq.model.generated.Shinblog;
import com.shin.blog.jooq.model.generated.tables.records.ScArticleRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row13;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TScArticle extends TableImpl<ScArticleRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>shinblog.sc_article</code>
     */
    public static final TScArticle SC_ARTICLE = new TScArticle();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ScArticleRecord> getRecordType() {
        return ScArticleRecord.class;
    }

    /**
     * The column <code>shinblog.sc_article.id</code>.
     */
    public final TableField<ScArticleRecord, String> ID = createField(DSL.name("id"), SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * The column <code>shinblog.sc_article.deleted</code>. 逻辑删除标识,0标识未删除,1标识已删除
     */
    public final TableField<ScArticleRecord, Integer> DELETED = createField(DSL.name("deleted"), SQLDataType.INTEGER.defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "逻辑删除标识,0标识未删除,1标识已删除");

    /**
     * The column <code>shinblog.sc_article.status</code>. 状态00在用01作废
     */
    public final TableField<ScArticleRecord, String> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR(8).defaultValue(DSL.inline("00", SQLDataType.VARCHAR)), this, "状态00在用01作废");

    /**
     * The column <code>shinblog.sc_article.comment_counts</code>. 评论数量
     */
    public final TableField<ScArticleRecord, Integer> COMMENT_COUNTS = createField(DSL.name("comment_counts"), SQLDataType.INTEGER, this, "评论数量");

    /**
     * The column <code>shinblog.sc_article.create_time</code>. 创建时间
     */
    public final TableField<ScArticleRecord, Timestamp> CREATE_TIME = createField(DSL.name("create_time"), SQLDataType.TIMESTAMP(0).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.TIMESTAMP)), this, "创建时间");

    /**
     * The column <code>shinblog.sc_article.update_time</code>. 更新时间
     */
    public final TableField<ScArticleRecord, Timestamp> UPDATE_TIME = createField(DSL.name("update_time"), SQLDataType.TIMESTAMP(0).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.TIMESTAMP)), this, "更新时间");

    /**
     * The column <code>shinblog.sc_article.summary</code>. 简介
     */
    public final TableField<ScArticleRecord, String> SUMMARY = createField(DSL.name("summary"), SQLDataType.VARCHAR(255), this, "简介");

    /**
     * The column <code>shinblog.sc_article.title</code>. 标题
     */
    public final TableField<ScArticleRecord, String> TITLE = createField(DSL.name("title"), SQLDataType.VARCHAR(64), this, "标题");

    /**
     * The column <code>shinblog.sc_article.view_counts</code>. 浏览数量
     */
    public final TableField<ScArticleRecord, Integer> VIEW_COUNTS = createField(DSL.name("view_counts"), SQLDataType.INTEGER, this, "浏览数量");

    /**
     * The column <code>shinblog.sc_article.weight</code>. 是否置顶
     */
    public final TableField<ScArticleRecord, Integer> WEIGHT = createField(DSL.name("weight"), SQLDataType.INTEGER.nullable(false), this, "是否置顶");

    /**
     * The column <code>shinblog.sc_article.author_id</code>. 作者id
     */
    public final TableField<ScArticleRecord, Long> AUTHOR_ID = createField(DSL.name("author_id"), SQLDataType.BIGINT, this, "作者id");

    /**
     * The column <code>shinblog.sc_article.body_id</code>. 内容id
     */
    public final TableField<ScArticleRecord, String> BODY_ID = createField(DSL.name("body_id"), SQLDataType.VARCHAR(32), this, "内容id");

    /**
     * The column <code>shinblog.sc_article.category_id</code>. 类别id
     */
    public final TableField<ScArticleRecord, String> CATEGORY_ID = createField(DSL.name("category_id"), SQLDataType.VARCHAR(32), this, "类别id");

    private TScArticle(Name alias, Table<ScArticleRecord> aliased) {
        this(alias, aliased, null);
    }

    private TScArticle(Name alias, Table<ScArticleRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>shinblog.sc_article</code> table reference
     */
    public TScArticle(String alias) {
        this(DSL.name(alias), SC_ARTICLE);
    }

    /**
     * Create an aliased <code>shinblog.sc_article</code> table reference
     */
    public TScArticle(Name alias) {
        this(alias, SC_ARTICLE);
    }

    /**
     * Create a <code>shinblog.sc_article</code> table reference
     */
    public TScArticle() {
        this(DSL.name("sc_article"), null);
    }

    public <O extends Record> TScArticle(Table<O> child, ForeignKey<O, ScArticleRecord> key) {
        super(child, key, SC_ARTICLE);
    }

    @Override
    public Schema getSchema() {
        return Shinblog.SHINBLOG;
    }

    @Override
    public UniqueKey<ScArticleRecord> getPrimaryKey() {
        return Keys.KEY_SC_ARTICLE_PRIMARY;
    }

    @Override
    public List<UniqueKey<ScArticleRecord>> getKeys() {
        return Arrays.<UniqueKey<ScArticleRecord>>asList(Keys.KEY_SC_ARTICLE_PRIMARY);
    }

    @Override
    public TScArticle as(String alias) {
        return new TScArticle(DSL.name(alias), this);
    }

    @Override
    public TScArticle as(Name alias) {
        return new TScArticle(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TScArticle rename(String name) {
        return new TScArticle(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TScArticle rename(Name name) {
        return new TScArticle(name, null);
    }

    // -------------------------------------------------------------------------
    // Row13 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row13<String, Integer, String, Integer, Timestamp, Timestamp, String, String, Integer, Integer, Long, String, String> fieldsRow() {
        return (Row13) super.fieldsRow();
    }
}
