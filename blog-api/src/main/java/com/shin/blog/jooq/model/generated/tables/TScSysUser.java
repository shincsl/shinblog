/*
 * This file is generated by jOOQ.
 */
package com.shin.blog.jooq.model.generated.tables;


import com.shin.blog.jooq.model.generated.Keys;
import com.shin.blog.jooq.model.generated.Shinblog;
import com.shin.blog.jooq.model.generated.tables.records.ScSysUserRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row13;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TScSysUser extends TableImpl<ScSysUserRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>shinblog.sc_sys_user</code>
     */
    public static final TScSysUser SC_SYS_USER = new TScSysUser();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ScSysUserRecord> getRecordType() {
        return ScSysUserRecord.class;
    }

    /**
     * The column <code>shinblog.sc_sys_user.id</code>.
     */
    public final TableField<ScSysUserRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>shinblog.sc_sys_user.account</code>. 账号
     */
    public final TableField<ScSysUserRecord, String> ACCOUNT = createField(DSL.name("account"), SQLDataType.VARCHAR(64), this, "账号");

    /**
     * The column <code>shinblog.sc_sys_user.admin</code>. 是否管理员
     */
    public final TableField<ScSysUserRecord, Boolean> ADMIN = createField(DSL.name("admin"), SQLDataType.BIT, this, "是否管理员");

    /**
     * The column <code>shinblog.sc_sys_user.avatar</code>. 头像
     */
    public final TableField<ScSysUserRecord, String> AVATAR = createField(DSL.name("avatar"), SQLDataType.VARCHAR(255), this, "头像");

    /**
     * The column <code>shinblog.sc_sys_user.create_date</code>. 注册时间
     */
    public final TableField<ScSysUserRecord, Long> CREATE_DATE = createField(DSL.name("create_date"), SQLDataType.BIGINT, this, "注册时间");

    /**
     * The column <code>shinblog.sc_sys_user.deleted</code>. 是否删除
     */
    public final TableField<ScSysUserRecord, Boolean> DELETED = createField(DSL.name("deleted"), SQLDataType.BIT, this, "是否删除");

    /**
     * The column <code>shinblog.sc_sys_user.email</code>. 邮箱
     */
    public final TableField<ScSysUserRecord, String> EMAIL = createField(DSL.name("email"), SQLDataType.VARCHAR(128), this, "邮箱");

    /**
     * The column <code>shinblog.sc_sys_user.last_login</code>. 最后登录时间
     */
    public final TableField<ScSysUserRecord, Long> LAST_LOGIN = createField(DSL.name("last_login"), SQLDataType.BIGINT, this, "最后登录时间");

    /**
     * The column <code>shinblog.sc_sys_user.mobile_phone_number</code>. 手机号
     */
    public final TableField<ScSysUserRecord, String> MOBILE_PHONE_NUMBER = createField(DSL.name("mobile_phone_number"), SQLDataType.VARCHAR(20), this, "手机号");

    /**
     * The column <code>shinblog.sc_sys_user.nickname</code>. 昵称
     */
    public final TableField<ScSysUserRecord, String> NICKNAME = createField(DSL.name("nickname"), SQLDataType.VARCHAR(255), this, "昵称");

    /**
     * The column <code>shinblog.sc_sys_user.password</code>. 密码
     */
    public final TableField<ScSysUserRecord, String> PASSWORD = createField(DSL.name("password"), SQLDataType.VARCHAR(64), this, "密码");

    /**
     * The column <code>shinblog.sc_sys_user.salt</code>. 加密盐
     */
    public final TableField<ScSysUserRecord, String> SALT = createField(DSL.name("salt"), SQLDataType.VARCHAR(255), this, "加密盐");

    /**
     * The column <code>shinblog.sc_sys_user.status</code>. 状态
     */
    public final TableField<ScSysUserRecord, String> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR(255), this, "状态");

    private TScSysUser(Name alias, Table<ScSysUserRecord> aliased) {
        this(alias, aliased, null);
    }

    private TScSysUser(Name alias, Table<ScSysUserRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>shinblog.sc_sys_user</code> table reference
     */
    public TScSysUser(String alias) {
        this(DSL.name(alias), SC_SYS_USER);
    }

    /**
     * Create an aliased <code>shinblog.sc_sys_user</code> table reference
     */
    public TScSysUser(Name alias) {
        this(alias, SC_SYS_USER);
    }

    /**
     * Create a <code>shinblog.sc_sys_user</code> table reference
     */
    public TScSysUser() {
        this(DSL.name("sc_sys_user"), null);
    }

    public <O extends Record> TScSysUser(Table<O> child, ForeignKey<O, ScSysUserRecord> key) {
        super(child, key, SC_SYS_USER);
    }

    @Override
    public Schema getSchema() {
        return Shinblog.SHINBLOG;
    }

    @Override
    public Identity<ScSysUserRecord, Long> getIdentity() {
        return (Identity<ScSysUserRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<ScSysUserRecord> getPrimaryKey() {
        return Keys.KEY_SC_SYS_USER_PRIMARY;
    }

    @Override
    public List<UniqueKey<ScSysUserRecord>> getKeys() {
        return Arrays.<UniqueKey<ScSysUserRecord>>asList(Keys.KEY_SC_SYS_USER_PRIMARY);
    }

    @Override
    public TScSysUser as(String alias) {
        return new TScSysUser(DSL.name(alias), this);
    }

    @Override
    public TScSysUser as(Name alias) {
        return new TScSysUser(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TScSysUser rename(String name) {
        return new TScSysUser(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TScSysUser rename(Name name) {
        return new TScSysUser(name, null);
    }

    // -------------------------------------------------------------------------
    // Row13 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row13<Long, String, Boolean, String, Long, Boolean, String, Long, String, String, String, String, String> fieldsRow() {
        return (Row13) super.fieldsRow();
    }
}
