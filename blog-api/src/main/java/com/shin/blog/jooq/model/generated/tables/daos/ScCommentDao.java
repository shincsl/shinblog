/*
 * This file is generated by jOOQ.
 */
package com.shin.blog.jooq.model.generated.tables.daos;


import com.shin.blog.jooq.learn.extend.ExtendDAOImpl;
import com.shin.blog.jooq.model.entity.ScComment;
import com.shin.blog.jooq.model.generated.tables.TScComment;
import com.shin.blog.jooq.model.generated.tables.records.ScCommentRecord;

import java.util.List;

import org.jooq.Configuration;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Repository
public class ScCommentDao extends ExtendDAOImpl<ScCommentRecord, ScComment, Long> {

    /**
     * Create a new ScCommentDao without any configuration
     */
    public ScCommentDao() {
        super(TScComment.SC_COMMENT, ScComment.class);
    }

    /**
     * Create a new ScCommentDao with an attached configuration
     */
    @Autowired
    public ScCommentDao(Configuration configuration) {
        super(TScComment.SC_COMMENT, ScComment.class, configuration);
    }

    @Override
    public Long getId(ScComment object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<ScComment> fetchRangeOfId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(TScComment.SC_COMMENT.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<ScComment> fetchById(Long... values) {
        return fetch(TScComment.SC_COMMENT.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public ScComment fetchOneById(Long value) {
        return fetchOne(TScComment.SC_COMMENT.ID, value);
    }

    /**
     * Fetch records that have <code>content BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<ScComment> fetchRangeOfContent(String lowerInclusive, String upperInclusive) {
        return fetchRange(TScComment.SC_COMMENT.CONTENT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>content IN (values)</code>
     */
    public List<ScComment> fetchByContent(String... values) {
        return fetch(TScComment.SC_COMMENT.CONTENT, values);
    }

    /**
     * Fetch records that have <code>create_date BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<ScComment> fetchRangeOfCreateDate(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(TScComment.SC_COMMENT.CREATE_DATE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>create_date IN (values)</code>
     */
    public List<ScComment> fetchByCreateDate(Long... values) {
        return fetch(TScComment.SC_COMMENT.CREATE_DATE, values);
    }

    /**
     * Fetch records that have <code>article_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<ScComment> fetchRangeOfArticleId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(TScComment.SC_COMMENT.ARTICLE_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>article_id IN (values)</code>
     */
    public List<ScComment> fetchByArticleId(Long... values) {
        return fetch(TScComment.SC_COMMENT.ARTICLE_ID, values);
    }

    /**
     * Fetch records that have <code>author_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<ScComment> fetchRangeOfAuthorId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(TScComment.SC_COMMENT.AUTHOR_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>author_id IN (values)</code>
     */
    public List<ScComment> fetchByAuthorId(Long... values) {
        return fetch(TScComment.SC_COMMENT.AUTHOR_ID, values);
    }

    /**
     * Fetch records that have <code>parent_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<ScComment> fetchRangeOfParentId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(TScComment.SC_COMMENT.PARENT_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>parent_id IN (values)</code>
     */
    public List<ScComment> fetchByParentId(Long... values) {
        return fetch(TScComment.SC_COMMENT.PARENT_ID, values);
    }

    /**
     * Fetch records that have <code>to_uid BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<ScComment> fetchRangeOfToUid(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(TScComment.SC_COMMENT.TO_UID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>to_uid IN (values)</code>
     */
    public List<ScComment> fetchByToUid(Long... values) {
        return fetch(TScComment.SC_COMMENT.TO_UID, values);
    }

    /**
     * Fetch records that have <code>level BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<ScComment> fetchRangeOfLevel(String lowerInclusive, String upperInclusive) {
        return fetchRange(TScComment.SC_COMMENT.LEVEL, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>level IN (values)</code>
     */
    public List<ScComment> fetchByLevel(String... values) {
        return fetch(TScComment.SC_COMMENT.LEVEL, values);
    }
}
