/*
 * This file is generated by jOOQ.
 */
package com.shin.blog.jooq.model.generated.tables.records;


import com.shin.blog.jooq.model.generated.tables.TScComment;
import com.shin.blog.jooq.model.generated.tables.interfaces.IScComment;

import java.sql.Timestamp;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record8;
import org.jooq.Row8;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ScCommentRecord extends UpdatableRecordImpl<ScCommentRecord> implements Record8<String, String, Timestamp, String, Long, String, Long, Integer>, IScComment {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>shinblog.sc_comment.id</code>.
     */
    @Override
    public void setId(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>shinblog.sc_comment.id</code>.
     */
    @Override
    public String getId() {
        return (String) get(0);
    }

    /**
     * Setter for <code>shinblog.sc_comment.content</code>.
     */
    @Override
    public void setContent(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>shinblog.sc_comment.content</code>.
     */
    @Override
    public String getContent() {
        return (String) get(1);
    }

    /**
     * Setter for <code>shinblog.sc_comment.create_time</code>.
     */
    @Override
    public void setCreateTime(Timestamp value) {
        set(2, value);
    }

    /**
     * Getter for <code>shinblog.sc_comment.create_time</code>.
     */
    @Override
    public Timestamp getCreateTime() {
        return (Timestamp) get(2);
    }

    /**
     * Setter for <code>shinblog.sc_comment.article_id</code>.
     */
    @Override
    public void setArticleId(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>shinblog.sc_comment.article_id</code>.
     */
    @Override
    public String getArticleId() {
        return (String) get(3);
    }

    /**
     * Setter for <code>shinblog.sc_comment.author_id</code>.
     */
    @Override
    public void setAuthorId(Long value) {
        set(4, value);
    }

    /**
     * Getter for <code>shinblog.sc_comment.author_id</code>.
     */
    @Override
    public Long getAuthorId() {
        return (Long) get(4);
    }

    /**
     * Setter for <code>shinblog.sc_comment.parent_id</code>.
     */
    @Override
    public void setParentId(String value) {
        set(5, value);
    }

    /**
     * Getter for <code>shinblog.sc_comment.parent_id</code>.
     */
    @Override
    public String getParentId() {
        return (String) get(5);
    }

    /**
     * Setter for <code>shinblog.sc_comment.to_uid</code>.
     */
    @Override
    public void setToUid(Long value) {
        set(6, value);
    }

    /**
     * Getter for <code>shinblog.sc_comment.to_uid</code>.
     */
    @Override
    public Long getToUid() {
        return (Long) get(6);
    }

    /**
     * Setter for <code>shinblog.sc_comment.level</code>.
     */
    @Override
    public void setLevel(Integer value) {
        set(7, value);
    }

    /**
     * Getter for <code>shinblog.sc_comment.level</code>.
     */
    @Override
    public Integer getLevel() {
        return (Integer) get(7);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record8 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row8<String, String, Timestamp, String, Long, String, Long, Integer> fieldsRow() {
        return (Row8) super.fieldsRow();
    }

    @Override
    public Row8<String, String, Timestamp, String, Long, String, Long, Integer> valuesRow() {
        return (Row8) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return TScComment.SC_COMMENT.ID;
    }

    @Override
    public Field<String> field2() {
        return TScComment.SC_COMMENT.CONTENT;
    }

    @Override
    public Field<Timestamp> field3() {
        return TScComment.SC_COMMENT.CREATE_TIME;
    }

    @Override
    public Field<String> field4() {
        return TScComment.SC_COMMENT.ARTICLE_ID;
    }

    @Override
    public Field<Long> field5() {
        return TScComment.SC_COMMENT.AUTHOR_ID;
    }

    @Override
    public Field<String> field6() {
        return TScComment.SC_COMMENT.PARENT_ID;
    }

    @Override
    public Field<Long> field7() {
        return TScComment.SC_COMMENT.TO_UID;
    }

    @Override
    public Field<Integer> field8() {
        return TScComment.SC_COMMENT.LEVEL;
    }

    @Override
    public String component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getContent();
    }

    @Override
    public Timestamp component3() {
        return getCreateTime();
    }

    @Override
    public String component4() {
        return getArticleId();
    }

    @Override
    public Long component5() {
        return getAuthorId();
    }

    @Override
    public String component6() {
        return getParentId();
    }

    @Override
    public Long component7() {
        return getToUid();
    }

    @Override
    public Integer component8() {
        return getLevel();
    }

    @Override
    public String value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getContent();
    }

    @Override
    public Timestamp value3() {
        return getCreateTime();
    }

    @Override
    public String value4() {
        return getArticleId();
    }

    @Override
    public Long value5() {
        return getAuthorId();
    }

    @Override
    public String value6() {
        return getParentId();
    }

    @Override
    public Long value7() {
        return getToUid();
    }

    @Override
    public Integer value8() {
        return getLevel();
    }

    @Override
    public ScCommentRecord value1(String value) {
        setId(value);
        return this;
    }

    @Override
    public ScCommentRecord value2(String value) {
        setContent(value);
        return this;
    }

    @Override
    public ScCommentRecord value3(Timestamp value) {
        setCreateTime(value);
        return this;
    }

    @Override
    public ScCommentRecord value4(String value) {
        setArticleId(value);
        return this;
    }

    @Override
    public ScCommentRecord value5(Long value) {
        setAuthorId(value);
        return this;
    }

    @Override
    public ScCommentRecord value6(String value) {
        setParentId(value);
        return this;
    }

    @Override
    public ScCommentRecord value7(Long value) {
        setToUid(value);
        return this;
    }

    @Override
    public ScCommentRecord value8(Integer value) {
        setLevel(value);
        return this;
    }

    @Override
    public ScCommentRecord values(String value1, String value2, Timestamp value3, String value4, Long value5, String value6, Long value7, Integer value8) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        return this;
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(IScComment from) {
        setId(from.getId());
        setContent(from.getContent());
        setCreateTime(from.getCreateTime());
        setArticleId(from.getArticleId());
        setAuthorId(from.getAuthorId());
        setParentId(from.getParentId());
        setToUid(from.getToUid());
        setLevel(from.getLevel());
    }

    @Override
    public <E extends IScComment> E into(E into) {
        into.from(this);
        return into;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ScCommentRecord
     */
    public ScCommentRecord() {
        super(TScComment.SC_COMMENT);
    }

    /**
     * Create a detached, initialised ScCommentRecord
     */
    public ScCommentRecord(String id, String content, Timestamp createTime, String articleId, Long authorId, String parentId, Long toUid, Integer level) {
        super(TScComment.SC_COMMENT);

        setId(id);
        setContent(content);
        setCreateTime(createTime);
        setArticleId(articleId);
        setAuthorId(authorId);
        setParentId(parentId);
        setToUid(toUid);
        setLevel(level);
    }
}
