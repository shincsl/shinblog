/*
 * This file is generated by jOOQ.
 */
package com.shin.blog.jooq.model.generated;


import com.shin.blog.jooq.model.generated.tables.TScAdmin;
import com.shin.blog.jooq.model.generated.tables.TScAdminPermission;
import com.shin.blog.jooq.model.generated.tables.TScArticle;
import com.shin.blog.jooq.model.generated.tables.TScArticleBody;
import com.shin.blog.jooq.model.generated.tables.TScArticleTag;
import com.shin.blog.jooq.model.generated.tables.TScCategory;
import com.shin.blog.jooq.model.generated.tables.TScComment;
import com.shin.blog.jooq.model.generated.tables.TScPermission;
import com.shin.blog.jooq.model.generated.tables.TScSysLog;
import com.shin.blog.jooq.model.generated.tables.TScSysUser;
import com.shin.blog.jooq.model.generated.tables.TScTag;
import com.shin.blog.jooq.model.generated.tables.records.ScAdminPermissionRecord;
import com.shin.blog.jooq.model.generated.tables.records.ScAdminRecord;
import com.shin.blog.jooq.model.generated.tables.records.ScArticleBodyRecord;
import com.shin.blog.jooq.model.generated.tables.records.ScArticleRecord;
import com.shin.blog.jooq.model.generated.tables.records.ScArticleTagRecord;
import com.shin.blog.jooq.model.generated.tables.records.ScCategoryRecord;
import com.shin.blog.jooq.model.generated.tables.records.ScCommentRecord;
import com.shin.blog.jooq.model.generated.tables.records.ScPermissionRecord;
import com.shin.blog.jooq.model.generated.tables.records.ScSysLogRecord;
import com.shin.blog.jooq.model.generated.tables.records.ScSysUserRecord;
import com.shin.blog.jooq.model.generated.tables.records.ScTagRecord;

import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in 
 * shinblog.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<ScAdminRecord> KEY_SC_ADMIN_PRIMARY = Internal.createUniqueKey(TScAdmin.SC_ADMIN, DSL.name("KEY_sc_admin_PRIMARY"), new TableField[] { TScAdmin.SC_ADMIN.ID }, true);
    public static final UniqueKey<ScAdminPermissionRecord> KEY_SC_ADMIN_PERMISSION_PRIMARY = Internal.createUniqueKey(TScAdminPermission.SC_ADMIN_PERMISSION, DSL.name("KEY_sc_admin_permission_PRIMARY"), new TableField[] { TScAdminPermission.SC_ADMIN_PERMISSION.ID }, true);
    public static final UniqueKey<ScArticleRecord> KEY_SC_ARTICLE_PRIMARY = Internal.createUniqueKey(TScArticle.SC_ARTICLE, DSL.name("KEY_sc_article_PRIMARY"), new TableField[] { TScArticle.SC_ARTICLE.ID }, true);
    public static final UniqueKey<ScArticleBodyRecord> KEY_SC_ARTICLE_BODY_PRIMARY = Internal.createUniqueKey(TScArticleBody.SC_ARTICLE_BODY, DSL.name("KEY_sc_article_body_PRIMARY"), new TableField[] { TScArticleBody.SC_ARTICLE_BODY.ID }, true);
    public static final UniqueKey<ScArticleTagRecord> KEY_SC_ARTICLE_TAG_PRIMARY = Internal.createUniqueKey(TScArticleTag.SC_ARTICLE_TAG, DSL.name("KEY_sc_article_tag_PRIMARY"), new TableField[] { TScArticleTag.SC_ARTICLE_TAG.ID }, true);
    public static final UniqueKey<ScCategoryRecord> KEY_SC_CATEGORY_PRIMARY = Internal.createUniqueKey(TScCategory.SC_CATEGORY, DSL.name("KEY_sc_category_PRIMARY"), new TableField[] { TScCategory.SC_CATEGORY.ID }, true);
    public static final UniqueKey<ScCommentRecord> KEY_SC_COMMENT_PRIMARY = Internal.createUniqueKey(TScComment.SC_COMMENT, DSL.name("KEY_sc_comment_PRIMARY"), new TableField[] { TScComment.SC_COMMENT.ID }, true);
    public static final UniqueKey<ScPermissionRecord> KEY_SC_PERMISSION_PRIMARY = Internal.createUniqueKey(TScPermission.SC_PERMISSION, DSL.name("KEY_sc_permission_PRIMARY"), new TableField[] { TScPermission.SC_PERMISSION.ID }, true);
    public static final UniqueKey<ScSysLogRecord> KEY_SC_SYS_LOG_PRIMARY = Internal.createUniqueKey(TScSysLog.SC_SYS_LOG, DSL.name("KEY_sc_sys_log_PRIMARY"), new TableField[] { TScSysLog.SC_SYS_LOG.ID }, true);
    public static final UniqueKey<ScSysUserRecord> KEY_SC_SYS_USER_PRIMARY = Internal.createUniqueKey(TScSysUser.SC_SYS_USER, DSL.name("KEY_sc_sys_user_PRIMARY"), new TableField[] { TScSysUser.SC_SYS_USER.ID }, true);
    public static final UniqueKey<ScTagRecord> KEY_SC_TAG_PRIMARY = Internal.createUniqueKey(TScTag.SC_TAG, DSL.name("KEY_sc_tag_PRIMARY"), new TableField[] { TScTag.SC_TAG.ID }, true);
}
