/*
 * This file is generated by jOOQ.
 */
package com.shin.blog.jooq.model.generated.tables;


import com.shin.blog.jooq.model.generated.Keys;
import com.shin.blog.jooq.model.generated.Shinblog;
import com.shin.blog.jooq.model.generated.tables.records.ScTagRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TScTag extends TableImpl<ScTagRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>shinblog.sc_tag</code>
     */
    public static final TScTag SC_TAG = new TScTag();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ScTagRecord> getRecordType() {
        return ScTagRecord.class;
    }

    /**
     * The column <code>shinblog.sc_tag.id</code>.
     */
    public final TableField<ScTagRecord, String> ID = createField(DSL.name("id"), SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * The column <code>shinblog.sc_tag.avatar</code>.
     */
    public final TableField<ScTagRecord, String> AVATAR = createField(DSL.name("avatar"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>shinblog.sc_tag.tag_name</code>.
     */
    public final TableField<ScTagRecord, String> TAG_NAME = createField(DSL.name("tag_name"), SQLDataType.VARCHAR(255), this, "");

    private TScTag(Name alias, Table<ScTagRecord> aliased) {
        this(alias, aliased, null);
    }

    private TScTag(Name alias, Table<ScTagRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>shinblog.sc_tag</code> table reference
     */
    public TScTag(String alias) {
        this(DSL.name(alias), SC_TAG);
    }

    /**
     * Create an aliased <code>shinblog.sc_tag</code> table reference
     */
    public TScTag(Name alias) {
        this(alias, SC_TAG);
    }

    /**
     * Create a <code>shinblog.sc_tag</code> table reference
     */
    public TScTag() {
        this(DSL.name("sc_tag"), null);
    }

    public <O extends Record> TScTag(Table<O> child, ForeignKey<O, ScTagRecord> key) {
        super(child, key, SC_TAG);
    }

    @Override
    public Schema getSchema() {
        return Shinblog.SHINBLOG;
    }

    @Override
    public UniqueKey<ScTagRecord> getPrimaryKey() {
        return Keys.KEY_SC_TAG_PRIMARY;
    }

    @Override
    public List<UniqueKey<ScTagRecord>> getKeys() {
        return Arrays.<UniqueKey<ScTagRecord>>asList(Keys.KEY_SC_TAG_PRIMARY);
    }

    @Override
    public TScTag as(String alias) {
        return new TScTag(DSL.name(alias), this);
    }

    @Override
    public TScTag as(Name alias) {
        return new TScTag(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TScTag rename(String name) {
        return new TScTag(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TScTag rename(Name name) {
        return new TScTag(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
