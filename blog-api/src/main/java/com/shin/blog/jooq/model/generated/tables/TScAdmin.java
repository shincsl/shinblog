/*
 * This file is generated by jOOQ.
 */
package com.shin.blog.jooq.model.generated.tables;


import com.shin.blog.jooq.model.generated.Keys;
import com.shin.blog.jooq.model.generated.Shinblog;
import com.shin.blog.jooq.model.generated.tables.records.ScAdminRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TScAdmin extends TableImpl<ScAdminRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>shinblog.sc_admin</code>
     */
    public static final TScAdmin SC_ADMIN = new TScAdmin();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ScAdminRecord> getRecordType() {
        return ScAdminRecord.class;
    }

    /**
     * The column <code>shinblog.sc_admin.id</code>.
     */
    public final TableField<ScAdminRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>shinblog.sc_admin.username</code>.
     */
    public final TableField<ScAdminRecord, String> USERNAME = createField(DSL.name("username"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>shinblog.sc_admin.password</code>.
     */
    public final TableField<ScAdminRecord, String> PASSWORD = createField(DSL.name("password"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    private TScAdmin(Name alias, Table<ScAdminRecord> aliased) {
        this(alias, aliased, null);
    }

    private TScAdmin(Name alias, Table<ScAdminRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>shinblog.sc_admin</code> table reference
     */
    public TScAdmin(String alias) {
        this(DSL.name(alias), SC_ADMIN);
    }

    /**
     * Create an aliased <code>shinblog.sc_admin</code> table reference
     */
    public TScAdmin(Name alias) {
        this(alias, SC_ADMIN);
    }

    /**
     * Create a <code>shinblog.sc_admin</code> table reference
     */
    public TScAdmin() {
        this(DSL.name("sc_admin"), null);
    }

    public <O extends Record> TScAdmin(Table<O> child, ForeignKey<O, ScAdminRecord> key) {
        super(child, key, SC_ADMIN);
    }

    @Override
    public Schema getSchema() {
        return Shinblog.SHINBLOG;
    }

    @Override
    public Identity<ScAdminRecord, Long> getIdentity() {
        return (Identity<ScAdminRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<ScAdminRecord> getPrimaryKey() {
        return Keys.KEY_SC_ADMIN_PRIMARY;
    }

    @Override
    public List<UniqueKey<ScAdminRecord>> getKeys() {
        return Arrays.<UniqueKey<ScAdminRecord>>asList(Keys.KEY_SC_ADMIN_PRIMARY);
    }

    @Override
    public TScAdmin as(String alias) {
        return new TScAdmin(DSL.name(alias), this);
    }

    @Override
    public TScAdmin as(Name alias) {
        return new TScAdmin(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TScAdmin rename(String name) {
        return new TScAdmin(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TScAdmin rename(Name name) {
        return new TScAdmin(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
