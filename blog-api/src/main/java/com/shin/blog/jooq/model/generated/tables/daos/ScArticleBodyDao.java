/*
 * This file is generated by jOOQ.
 */
package com.shin.blog.jooq.model.generated.tables.daos;


import com.shin.blog.jooq.learn.extend.ExtendDAOImpl;
import com.shin.blog.jooq.model.entity.ScArticleBody;
import com.shin.blog.jooq.model.generated.tables.TScArticleBody;
import com.shin.blog.jooq.model.generated.tables.records.ScArticleBodyRecord;

import java.util.List;

import org.jooq.Configuration;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Repository
public class ScArticleBodyDao extends ExtendDAOImpl<ScArticleBodyRecord, ScArticleBody, String> {

    /**
     * Create a new ScArticleBodyDao without any configuration
     */
    public ScArticleBodyDao() {
        super(TScArticleBody.SC_ARTICLE_BODY, ScArticleBody.class);
    }

    /**
     * Create a new ScArticleBodyDao with an attached configuration
     */
    @Autowired
    public ScArticleBodyDao(Configuration configuration) {
        super(TScArticleBody.SC_ARTICLE_BODY, ScArticleBody.class, configuration);
    }

    @Override
    public String getId(ScArticleBody object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<ScArticleBody> fetchRangeOfId(String lowerInclusive, String upperInclusive) {
        return fetchRange(TScArticleBody.SC_ARTICLE_BODY.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<ScArticleBody> fetchById(String... values) {
        return fetch(TScArticleBody.SC_ARTICLE_BODY.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public ScArticleBody fetchOneById(String value) {
        return fetchOne(TScArticleBody.SC_ARTICLE_BODY.ID, value);
    }

    /**
     * Fetch records that have <code>content BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<ScArticleBody> fetchRangeOfContent(String lowerInclusive, String upperInclusive) {
        return fetchRange(TScArticleBody.SC_ARTICLE_BODY.CONTENT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>content IN (values)</code>
     */
    public List<ScArticleBody> fetchByContent(String... values) {
        return fetch(TScArticleBody.SC_ARTICLE_BODY.CONTENT, values);
    }

    /**
     * Fetch records that have <code>content_html BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<ScArticleBody> fetchRangeOfContentHtml(String lowerInclusive, String upperInclusive) {
        return fetchRange(TScArticleBody.SC_ARTICLE_BODY.CONTENT_HTML, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>content_html IN (values)</code>
     */
    public List<ScArticleBody> fetchByContentHtml(String... values) {
        return fetch(TScArticleBody.SC_ARTICLE_BODY.CONTENT_HTML, values);
    }

    /**
     * Fetch records that have <code>article_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<ScArticleBody> fetchRangeOfArticleId(String lowerInclusive, String upperInclusive) {
        return fetchRange(TScArticleBody.SC_ARTICLE_BODY.ARTICLE_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>article_id IN (values)</code>
     */
    public List<ScArticleBody> fetchByArticleId(String... values) {
        return fetch(TScArticleBody.SC_ARTICLE_BODY.ARTICLE_ID, values);
    }
}
