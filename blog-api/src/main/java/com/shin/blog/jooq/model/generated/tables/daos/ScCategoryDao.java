/*
 * This file is generated by jOOQ.
 */
package com.shin.blog.jooq.model.generated.tables.daos;


import com.shin.blog.jooq.learn.extend.ExtendDAOImpl;
import com.shin.blog.jooq.model.entity.ScCategory;
import com.shin.blog.jooq.model.generated.tables.TScCategory;
import com.shin.blog.jooq.model.generated.tables.records.ScCategoryRecord;

import java.util.List;

import org.jooq.Configuration;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Repository
public class ScCategoryDao extends ExtendDAOImpl<ScCategoryRecord, ScCategory, String> {

    /**
     * Create a new ScCategoryDao without any configuration
     */
    public ScCategoryDao() {
        super(TScCategory.SC_CATEGORY, ScCategory.class);
    }

    /**
     * Create a new ScCategoryDao with an attached configuration
     */
    @Autowired
    public ScCategoryDao(Configuration configuration) {
        super(TScCategory.SC_CATEGORY, ScCategory.class, configuration);
    }

    @Override
    public String getId(ScCategory object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<ScCategory> fetchRangeOfId(String lowerInclusive, String upperInclusive) {
        return fetchRange(TScCategory.SC_CATEGORY.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<ScCategory> fetchById(String... values) {
        return fetch(TScCategory.SC_CATEGORY.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public ScCategory fetchOneById(String value) {
        return fetchOne(TScCategory.SC_CATEGORY.ID, value);
    }

    /**
     * Fetch records that have <code>avatar BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<ScCategory> fetchRangeOfAvatar(String lowerInclusive, String upperInclusive) {
        return fetchRange(TScCategory.SC_CATEGORY.AVATAR, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>avatar IN (values)</code>
     */
    public List<ScCategory> fetchByAvatar(String... values) {
        return fetch(TScCategory.SC_CATEGORY.AVATAR, values);
    }

    /**
     * Fetch records that have <code>category_name BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<ScCategory> fetchRangeOfCategoryName(String lowerInclusive, String upperInclusive) {
        return fetchRange(TScCategory.SC_CATEGORY.CATEGORY_NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>category_name IN (values)</code>
     */
    public List<ScCategory> fetchByCategoryName(String... values) {
        return fetch(TScCategory.SC_CATEGORY.CATEGORY_NAME, values);
    }

    /**
     * Fetch records that have <code>description BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<ScCategory> fetchRangeOfDescription(String lowerInclusive, String upperInclusive) {
        return fetchRange(TScCategory.SC_CATEGORY.DESCRIPTION, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>description IN (values)</code>
     */
    public List<ScCategory> fetchByDescription(String... values) {
        return fetch(TScCategory.SC_CATEGORY.DESCRIPTION, values);
    }
}
