/*
 * This file is generated by jOOQ.
 */
package com.shin.blog.jooq.model.generated.tables;


import com.shin.blog.jooq.model.generated.Keys;
import com.shin.blog.jooq.model.generated.Shinblog;
import com.shin.blog.jooq.model.generated.tables.records.ScCategoryRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TScCategory extends TableImpl<ScCategoryRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>shinblog.sc_category</code>
     */
    public static final TScCategory SC_CATEGORY = new TScCategory();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ScCategoryRecord> getRecordType() {
        return ScCategoryRecord.class;
    }

    /**
     * The column <code>shinblog.sc_category.id</code>.
     */
    public final TableField<ScCategoryRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>shinblog.sc_category.avatar</code>.
     */
    public final TableField<ScCategoryRecord, String> AVATAR = createField(DSL.name("avatar"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>shinblog.sc_category.category_name</code>.
     */
    public final TableField<ScCategoryRecord, String> CATEGORY_NAME = createField(DSL.name("category_name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>shinblog.sc_category.description</code>.
     */
    public final TableField<ScCategoryRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR(255), this, "");

    private TScCategory(Name alias, Table<ScCategoryRecord> aliased) {
        this(alias, aliased, null);
    }

    private TScCategory(Name alias, Table<ScCategoryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>shinblog.sc_category</code> table reference
     */
    public TScCategory(String alias) {
        this(DSL.name(alias), SC_CATEGORY);
    }

    /**
     * Create an aliased <code>shinblog.sc_category</code> table reference
     */
    public TScCategory(Name alias) {
        this(alias, SC_CATEGORY);
    }

    /**
     * Create a <code>shinblog.sc_category</code> table reference
     */
    public TScCategory() {
        this(DSL.name("sc_category"), null);
    }

    public <O extends Record> TScCategory(Table<O> child, ForeignKey<O, ScCategoryRecord> key) {
        super(child, key, SC_CATEGORY);
    }

    @Override
    public Schema getSchema() {
        return Shinblog.SHINBLOG;
    }

    @Override
    public Identity<ScCategoryRecord, Long> getIdentity() {
        return (Identity<ScCategoryRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<ScCategoryRecord> getPrimaryKey() {
        return Keys.KEY_SC_CATEGORY_PRIMARY;
    }

    @Override
    public List<UniqueKey<ScCategoryRecord>> getKeys() {
        return Arrays.<UniqueKey<ScCategoryRecord>>asList(Keys.KEY_SC_CATEGORY_PRIMARY);
    }

    @Override
    public TScCategory as(String alias) {
        return new TScCategory(DSL.name(alias), this);
    }

    @Override
    public TScCategory as(Name alias) {
        return new TScCategory(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TScCategory rename(String name) {
        return new TScCategory(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TScCategory rename(Name name) {
        return new TScCategory(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, String, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
