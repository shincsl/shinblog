/*
 * This file is generated by jOOQ.
 */
package com.shin.blog.jooq.model.generated.tables;


import com.shin.blog.jooq.model.generated.Indexes;
import com.shin.blog.jooq.model.generated.Keys;
import com.shin.blog.jooq.model.generated.Shinblog;
import com.shin.blog.jooq.model.generated.tables.records.ScCommentRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TScComment extends TableImpl<ScCommentRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>shinblog.sc_comment</code>
     */
    public static final TScComment SC_COMMENT = new TScComment();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ScCommentRecord> getRecordType() {
        return ScCommentRecord.class;
    }

    /**
     * The column <code>shinblog.sc_comment.id</code>.
     */
    public final TableField<ScCommentRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>shinblog.sc_comment.content</code>.
     */
    public final TableField<ScCommentRecord, String> CONTENT = createField(DSL.name("content"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>shinblog.sc_comment.create_date</code>.
     */
    public final TableField<ScCommentRecord, Long> CREATE_DATE = createField(DSL.name("create_date"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>shinblog.sc_comment.article_id</code>.
     */
    public final TableField<ScCommentRecord, Long> ARTICLE_ID = createField(DSL.name("article_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>shinblog.sc_comment.author_id</code>.
     */
    public final TableField<ScCommentRecord, Long> AUTHOR_ID = createField(DSL.name("author_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>shinblog.sc_comment.parent_id</code>.
     */
    public final TableField<ScCommentRecord, Long> PARENT_ID = createField(DSL.name("parent_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>shinblog.sc_comment.to_uid</code>.
     */
    public final TableField<ScCommentRecord, Long> TO_UID = createField(DSL.name("to_uid"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>shinblog.sc_comment.level</code>.
     */
    public final TableField<ScCommentRecord, String> LEVEL = createField(DSL.name("level"), SQLDataType.VARCHAR(1).nullable(false), this, "");

    private TScComment(Name alias, Table<ScCommentRecord> aliased) {
        this(alias, aliased, null);
    }

    private TScComment(Name alias, Table<ScCommentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>shinblog.sc_comment</code> table reference
     */
    public TScComment(String alias) {
        this(DSL.name(alias), SC_COMMENT);
    }

    /**
     * Create an aliased <code>shinblog.sc_comment</code> table reference
     */
    public TScComment(Name alias) {
        this(alias, SC_COMMENT);
    }

    /**
     * Create a <code>shinblog.sc_comment</code> table reference
     */
    public TScComment() {
        this(DSL.name("sc_comment"), null);
    }

    public <O extends Record> TScComment(Table<O> child, ForeignKey<O, ScCommentRecord> key) {
        super(child, key, SC_COMMENT);
    }

    @Override
    public Schema getSchema() {
        return Shinblog.SHINBLOG;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.SC_COMMENT_ARTICLE_ID);
    }

    @Override
    public Identity<ScCommentRecord, Long> getIdentity() {
        return (Identity<ScCommentRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<ScCommentRecord> getPrimaryKey() {
        return Keys.KEY_SC_COMMENT_PRIMARY;
    }

    @Override
    public List<UniqueKey<ScCommentRecord>> getKeys() {
        return Arrays.<UniqueKey<ScCommentRecord>>asList(Keys.KEY_SC_COMMENT_PRIMARY);
    }

    @Override
    public TScComment as(String alias) {
        return new TScComment(DSL.name(alias), this);
    }

    @Override
    public TScComment as(Name alias) {
        return new TScComment(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TScComment rename(String name) {
        return new TScComment(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TScComment rename(Name name) {
        return new TScComment(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Long, String, Long, Long, Long, Long, Long, String> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
