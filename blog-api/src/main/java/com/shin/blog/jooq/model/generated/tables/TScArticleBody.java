/*
 * This file is generated by jOOQ.
 */
package com.shin.blog.jooq.model.generated.tables;


import com.shin.blog.jooq.model.generated.Indexes;
import com.shin.blog.jooq.model.generated.Keys;
import com.shin.blog.jooq.model.generated.Shinblog;
import com.shin.blog.jooq.model.generated.tables.records.ScArticleBodyRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TScArticleBody extends TableImpl<ScArticleBodyRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>shinblog.sc_article_body</code>
     */
    public static final TScArticleBody SC_ARTICLE_BODY = new TScArticleBody();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ScArticleBodyRecord> getRecordType() {
        return ScArticleBodyRecord.class;
    }

    /**
     * The column <code>shinblog.sc_article_body.id</code>.
     */
    public final TableField<ScArticleBodyRecord, String> ID = createField(DSL.name("id"), SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * The column <code>shinblog.sc_article_body.content</code>.
     */
    public final TableField<ScArticleBodyRecord, String> CONTENT = createField(DSL.name("content"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>shinblog.sc_article_body.content_html</code>.
     */
    public final TableField<ScArticleBodyRecord, String> CONTENT_HTML = createField(DSL.name("content_html"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>shinblog.sc_article_body.article_id</code>.
     */
    public final TableField<ScArticleBodyRecord, String> ARTICLE_ID = createField(DSL.name("article_id"), SQLDataType.VARCHAR(32).nullable(false), this, "");

    private TScArticleBody(Name alias, Table<ScArticleBodyRecord> aliased) {
        this(alias, aliased, null);
    }

    private TScArticleBody(Name alias, Table<ScArticleBodyRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>shinblog.sc_article_body</code> table reference
     */
    public TScArticleBody(String alias) {
        this(DSL.name(alias), SC_ARTICLE_BODY);
    }

    /**
     * Create an aliased <code>shinblog.sc_article_body</code> table reference
     */
    public TScArticleBody(Name alias) {
        this(alias, SC_ARTICLE_BODY);
    }

    /**
     * Create a <code>shinblog.sc_article_body</code> table reference
     */
    public TScArticleBody() {
        this(DSL.name("sc_article_body"), null);
    }

    public <O extends Record> TScArticleBody(Table<O> child, ForeignKey<O, ScArticleBodyRecord> key) {
        super(child, key, SC_ARTICLE_BODY);
    }

    @Override
    public Schema getSchema() {
        return Shinblog.SHINBLOG;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.SC_ARTICLE_BODY_ARTICLE_ID);
    }

    @Override
    public UniqueKey<ScArticleBodyRecord> getPrimaryKey() {
        return Keys.KEY_SC_ARTICLE_BODY_PRIMARY;
    }

    @Override
    public List<UniqueKey<ScArticleBodyRecord>> getKeys() {
        return Arrays.<UniqueKey<ScArticleBodyRecord>>asList(Keys.KEY_SC_ARTICLE_BODY_PRIMARY);
    }

    @Override
    public TScArticleBody as(String alias) {
        return new TScArticleBody(DSL.name(alias), this);
    }

    @Override
    public TScArticleBody as(Name alias) {
        return new TScArticleBody(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TScArticleBody rename(String name) {
        return new TScArticleBody(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TScArticleBody rename(Name name) {
        return new TScArticleBody(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<String, String, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
